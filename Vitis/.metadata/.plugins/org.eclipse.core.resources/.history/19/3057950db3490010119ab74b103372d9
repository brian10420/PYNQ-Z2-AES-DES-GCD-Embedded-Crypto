//lab4_2.c
#include <stdio.h>
#include "xil_printf.h"
#include "xil_exception.h"
#include "xscugic.h"
#include "inter_ip.h"
#include "xparameters.h"
#include "sleep.h"

XScuGic InterruptController; /* Instance of the Interrupt Controller */
static XScuGic_Config *GicConfig;/* The configuration parameters of the controller */

void INTERRUPT_Handler0(void *baseaddr_p){
	// BTN INTR test
	print("btn int !!!\r\n");
}
int ScuGicInterrupt_Init(void)
{
	int Status;
	/* Initialize the interrupt controller driver so that it is ready to use. */
	Xil_ExceptionInit();

	/* Check if the device ID in the GIC (Generic Interrupt Controller) */
	GicConfig = XScuGic_LookupConfig(XPAR_PS7_SCUGIC_0_DEVICE_ID);
	if (NULL == GicConfig) {
		return XST_FAILURE;
	}

	/* Initialize the GIC */

	Status = XScuGic_CfgInitialize(&InterruptController, GicConfig,
			GicConfig->CpuBaseAddress);

	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/* Setup the Interrupt System */

	/* Connect the interrupt controller to the hardware interrupt handling logic in 	the ARM processor. This means this interrupt will be added in the interrupt 	vector table */

	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_IRQ_INT,
			(Xil_ExceptionHandler) XScuGic_InterruptHandler,
			(void *) &InterruptController);

	/* Connect a device driver handler that will be called when an interrupt for the 	device occurs, the device driver handler performs the specific interrupt processing for the device. Since the xparameters.h file doesn¡¦t detect the external interrupts, we have to manually use the IRQ_F2P port numbers, such as 61, 62. */

	Status = XScuGic_Connect(&InterruptController,61,
			(Xil_ExceptionHandler)INTERRUPT_Handler0,
			(void *)&InterruptController);

	XScuGic_Enable(&InterruptController, 61);


	/* Enable interrupts in the ARM */

	Xil_ExceptionEnable();
	/* Set interrupts PriorityTriggerType */
	XScuGic_SetPriorityTriggerType(&InterruptController, 61, 0xa0, 3);

	if (Status != XST_SUCCESS)
		return XST_FAILURE;

	return XST_SUCCESS;
}

int main()
{
    int sw_data=0, led=0;
    int xstatus;

    xstatus = ScuGicInterrupt_Init();
    if (xstatus != XST_SUCCESS)
    	return XST_FAILURE;
    while(1){
        //LED test
        led++;
        INTER_IP_mWriteReg(XPAR_INTER_IP_0_S00_AXI_BASEADDR,0,led);
        xil_printf("LED Data = %d \n\r",led);
        //SWITCH test
        sw_data = INTER_IP_mReadReg(XPAR_INTER_IP_0_S00_AXI_BASEADDR,4);
        xil_printf("Switch Data = %d \n\r",sw_data);
       	sleep(3);
    }
    return 0;
}
